import numpy as np
import random
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

# 初始化参数
width, height = 37, 23  # 网格大小
n_years = 10  # 模拟的年数
nest_locations = [(1, 8),(2,9)]  # 初始巢穴位置
no_nest_zones = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7),(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8),(6, 4), (6, 5), (6, 6), (6, 7), (6, 8),(7, 7), (7, 8), (7, 9), (8, 7), (8, 8), (8, 9), (9, 7), (9, 8), (9, 9), (10, 7), (10, 8), (10, 9),(11, 8),(11,9),(18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6),(20, 26), (20, 27), (20, 28), (20, 29), (20, 30), (20, 31), (20, 32), (20, 33), (20, 34), (20, 35), (20, 36),(21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (21, 34), (21, 35), (21, 36),(22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), (22, 20), (22, 21), (22, 22), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 31), (22, 32), (22, 33), (22, 34), (22, 35), (22, 36)]  # 示例：指定不可筑巢的区域角落

# 初始化地图
map = np.zeros((height, width), dtype=int)

# 标记初始巢穴
for loc in nest_locations:
    y, x = loc
    map[y, x] = 1  # 将初始巢穴标记为已筑巢1次

# 标记不可筑巢区域的函数
def mark_no_nest_zones(map, no_nest_zones):
    for loc in no_nest_zones:
        y, x = loc
        map[y, x] = -1  # 使用-1标记不可筑巢区域

# 首次标记不可筑巢区域
mark_no_nest_zones(map, no_nest_zones)

# 政府干预函数
def government_intervention(map):
    for y in range(height):
        for x in range(width):
            if map[y, x] > 0 and random.random() < 0.5:  # 50%概率摧毁巢穴
                map[y, x] = 0

def count_nests(map):
    return np.sum(map > 0)

# 用于存储每年蜂巢总数的列表
nest_counts = []

# 模拟过程函数
def simulate_year(current_map):
    new_map = np.zeros_like(current_map)  # 开始每年都用一个新地图
    for y in range(height):
        for x in range(width):
            if current_map[y, x] == -1:
                new_map[y, x] = -1  # 保持不可筑巢区域
            elif current_map[y, x] > 0:  # 找到一个巢穴
                for dy in range(-2, 3):  # 在5x5区域内尝试产生新巢穴
                    for dx in range(-2, 3):
                        ny, nx = y + dy, x + dx
                        if 0 <= ny < height and 0 <= nx < width and new_map[ny, nx] != -1:
                            if random.random() < 0.2:  # 20%概率在每个格子产生新巢穴
                                new_map[ny, nx] = min(new_map[ny, nx] + 1, 5)
    return new_map

# 可视化函数
def visualize_map(map, year):
    cmap = mcolors.ListedColormap(['red', 'white', 'lightgray', 'gray', 'darkgray', 'black'])
    bounds = [-1, 0, 1, 2, 3, 4, 5]
    norm = mcolors.BoundaryNorm(bounds, cmap.N)
    plt.figure(figsize=(8, 6))
    plt.imshow(map, cmap=cmap, norm=norm)
    plt.colorbar(ticks=range(-1, 6), label='Nest Status')
    plt.title(f"Year {year}")
    plt.show()

# 运行模拟并可视化
for year in range(1, n_years + 1):
    government_intervention(map)  # 每年进行一次政府干预
    map = simulate_year(map)  # 使用更新后的地图进行下一年的模拟
    mark_no_nest_zones(map, no_nest_zones)  # 确保每年模拟后重新标记不可筑巢区域
    nest_counts.append(count_nests(map))  # 收集每年蜂巢的数量

# 确保 nest_counts 不是空的
print(nest_counts)  # 调试输出，查看 nest_counts 的内容

# 绘制每年蜂巢个数的折线图
plt.figure(figsize=(10, 6))
plt.plot(range(1, n_years + 1), nest_counts, marker='o')
plt.title("Number of Nests Each Year")
plt.xlabel("Year")
plt.ylabel("Number of Nests")
plt.grid(True)
plt.show()
