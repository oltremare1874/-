import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputRegressor

# 读取数据
df = pd.read_excel('new.xlsx')  # 替换为您的Excel文件路径

# 特征和标签
X = df[['有无重复字母', '单词出现频率', '字母出现频率']].values  # 特征矩阵
y = df[['1 try', '2 tries', '3 tries', '4 tries', '5 tries', '6 tries', '7 or more tries (X)']].values  # 标签矩阵


# 划分数据集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 数据规范化
scaler_X = StandardScaler()
scaler_y = StandardScaler()

X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)

y_train_scaled = scaler_y.fit_transform(y_train)
y_test_scaled = scaler_y.transform(y_test)

# 初始化GBDT模型
gbdt = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)

# 使用 MultiOutputRegressor 来处理多输出
multioutput_gbdt = MultiOutputRegressor(gbdt)

# 训练模型
multioutput_gbdt.fit(X_train_scaled, y_train_scaled)

# 评估模型
predictions_scaled = multioutput_gbdt.predict(X_test_scaled)
mse = mean_squared_error(y_test_scaled, predictions_scaled, multioutput='uniform_average')
print('MSE for each output: ', mse)

# 预测
x_new = np.array([[1, 0.0000023, 0.418799]])  # 示例新输入
x_new_scaled = scaler_X.transform(x_new)  # 规范化新输入
new_prediction_scaled = multioutput_gbdt.predict(x_new_scaled)  # 预测新输入的规范化结果
new_prediction = scaler_y.inverse_transform(new_prediction_scaled)  # 将新预测结果转换回原始尺度
# 如果需要保存预测结果到Excel
predictions_df = pd.DataFrame(new_prediction)

# predictions_df.to_excel('predictions.xlsx')

# 输出预测结果
print(predictions_df)
